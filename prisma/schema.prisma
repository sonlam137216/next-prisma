// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
} 
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  products    Product[]
}

model Collection {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  imageUrl    String?   // Thumbnail image path
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  price       Float
  quantity    Int           @default(0)
  inStock     Boolean       @default(true)
  type        ProductType   @default(THOI_TRANG)
  line        ProductLine   @default(PHO_THONG)
  createdAt   DateTime      @default(now())
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int
  collections Collection[]  // Many-to-many relation with collections
  images      ProductImage[]
  // Discount fields
  hasDiscount Boolean       @default(false)
  discountPrice Float?
  discountStartDate DateTime?
  discountEndDate DateTime?
  discountPercentage Int?   // Store as integer (e.g., 20 for 20%)
}
model ProductImage {
  id        Int       @id @default(autoincrement())
  url       String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  isMain    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
model BlogPost {
  id            Int      @id @default(autoincrement())
  title         String
  slug          String   @unique
  description   String?  @db.Text
  featuredImage String?
  path          String?
  category      String   @default("Uncategorized")
  readingTime   Int      @default(5) // in minutes
  published     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
model Order {
  id            Int           @id @default(autoincrement())
  orderNumber   String        @unique
  total         Float
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod
  firstName     String
  lastName      String
  email         String
  phone         String
  address       String
  city          String
  country       String
  postalCode    String?
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}
model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  productId Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  name      String   // Store product name at time of order
  imageUrl  String?  // Store image URL at time of order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
enum PaymentMethod {
  CARD
  COD
}

enum ProductType {
  PHONG_THUY
  THOI_TRANG
}

enum ProductLine {
  CAO_CAP
  TRUNG_CAP
  PHO_THONG
}